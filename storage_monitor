#!/bin/bash
################################################################################
# storage_monitor : Monitor mass storage and report when at or over threshold.
#
# BSD 0-clause license, "Zero Clause BSD", SPDX: 0BSD
# Copyright (c) 2019, Daniel C. Nygren. <dan.nygren@gmail.com>
#
# Current Implementation By: Dan Nygren
# Email: dan.nygren@gmail.com
# Original Concept: Vivek Gite
# https://www.cyberciti.biz/tips/shell-script-to-watch-the-disk-space.html
#
#   A shell script to monitor the disk free space. It will write a warning
# message to the system log and stdout if the free/available percentage of
# space on a filesystem is greater than or equal to the alert_percentage.
#
# CALLING SEQUENCE  storage_monitor [-p alert_percentage] [-x exclude_list]
#                                   [-i include_only_list]
#
# EXAMPLES          storage_monitor
# <time> <host> storage_monitor: WARNING usage of partition "/opt/PRG" at 80%.
#
#                   storage_monitor -p 50
# <time> <host> storage_monitor: WARNING usage of partition "/" at 52%.
# <time> <host> storage_monitor: WARNING usage of partition "/opt/PRG" at 80%.
#
#                   storage_monitor -x "opt|something_else" -p 50
# <time> <host> storage_monitor: WARNING usage of partition "/" at 52%.
#
#                   storage_monitor -p 1 -i "dev|run"
# <time> <host> storage_monitor: WARNING usage of partition "/run" at 5%.
#
# TARGET SYSTEM     Linux
#
# DEVELOPED USING   Linux
#
# CALLS             (Change these paths if necessary)
AWK=/usr/bin/gawk
CUT=/usr/bin/cut
DATE=/bin/date
BASENAME=/usr/bin/basename
HOSTNAME=/bin/hostname
LOGGER=/usr/bin/logger
DF=/bin/df
SED=/bin/sed
GREP=/bin/grep
#
# CALLED BY         Usually cron, but also can be called on the command line
#
# INPUTS            DEFAULT_PERCENTAGE, command line percentage,
#                   DEFAULT_EXCLUDE_LIST, command line exclude list,
#                   command line only include list
#
# OUTPUTS           Warning message to stdout (echo) and system log (logger)
#                   if usage greater than or equal to alert_percentage. If
#                   called by cron, and a mail transfer agent (MTA) is present,
#                   an email containing the warning message will be sent to a
#                   recipient as configured in the MTA.
#
# RETURNS           Returns true if script completes
#
# ERROR HANDLING    Prints the help message and exits with a failure exit code.
#
# WARNINGS          If run via cron, only the logger output will be saved. If
#                   stdout is also wanted, the user should configure an MTA
#                   (to receive stdout via email) or redirect stdout
#                   appropriately via the crontab entry.
#                   (2. Describe anything a maintainer should be aware of)
#                   (N. Describe anything a maintainer should be aware of)
################################################################################

#set -x # Uncomment this line to turn on xtrace for debugging

# Set the default percentage at and above which the operator will be alerted.
DEFAULT_PERCENTAGE=80

# Partition monitoring exclude list. If there is more than one partition,
# use "|" to separate the partitions.
DEFAULT_EXCLUDE_LIST="udev|tmpfs|net|cdrom"
#DEFAULT_EXCLUDE_LIST="" # Don't exclude anything.

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# ^^^^^^^^^^ Place code that may need modification above this point. ^^^^^^^^^^
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#--- Function(s) ---

Help ()
{
    # The Help function requires exit_status be set before it is called.
    # If for some reason exit_status is undefined, set it to a non-zero
    # (failure) value.
    if [[ -z exit_status ]]
    then
        exit_status=1
    fi

    # ">&2" Duplicates stdout error message to stderr. $(basename $0) is
    # used so just the name (not including the path) of the command used to
    # invoke this script is used. Thus you can rename this file and the
    # correct command will be printed out without having to change the
    # source code.

    echo >&2 \
"Usage: $(basename $0) checks if the free/available percentage of space is
greater than or equal to the alert_percentage, and if so, writes a message to
the system log and standard output. Filesystems containing \
$DEFAULT_EXCLUDE_LIST
are by default excluded from the check, but this list can be overridden on
the command line so as to exclude a different list, or only include a certain
list of filesystems.

Examples:
$ storage_monitor                             (alert_percentage default \
is $DEFAULT_PERCENTAGE%)
$ storage_monitor -p 50                       (alert_percentage set to 50%)
$ storage_monitor -x \"udev|tmpfs|net|cdrom\"   (exclude monitoring these \
filesystems)
$ storage_monitor -x \"\"                       (monitor all filesystems by \
excluding nothing)
$ storage_monitor -i \"dev|run|sys\"            (monitor only these filesystems)
$ storage_monitor -h                          (print out this help message)"
    exit $exit_status # Return with appropriate exit status.
}

function process_df_lines() {
while read output;
do
    #echo $output # Uncomment this line for additional debug output
    used=$(echo $output | $AWK '{print $1}' | $CUT -d'%' -f1)
    partition=$(echo $output | $AWK '{print $2}')
    if [ $used -ge $alert_percentage ] ; then
        date_string="$($DATE) "
        usage_string="$($BASENAME $0): \
WARNING usage of partition \"$partition\" at $used%."
        host_string="$($HOSTNAME) "
        echo $date_string$host_string$usage_string
        # Log files already have time stamps and host names, so don't add these.
        $LOGGER $usage_string
    fi
done

return
}

#--- Start Program ---

# Get any option parameters
while getopts hp:i:x: opt
do
    case "$opt" in
     p ) alert_percentage="$OPTARG";;   # Set alert_percentage from -p option.
     i ) include_list="$OPTARG"         # Set include_list from -i option.
         include_command_line_flag=1;;
     x ) exclude_list="$OPTARG"         # Set exclude_list from -x option.
         exclude_command_line_flag=1;;
     h ) exit_status=0
         Help;;             # Call Help() with a zero (success) exit status.
    \? ) exit_status=1
         Help;;             # If an unknown flag is used, call Help() with a
                            # non-zero (failure) exit status.
    esac
done

# If the percentage was not set on the command line, use the default.
if [ -z "$alert_percentage" ]
    then
    alert_percentage=$DEFAULT_PERCENTAGE
    # Uncomment the below lines for debugging
    # echo "Using default alert percentage of $DEFAULT_PERCENTAGE%."
    # else
    # echo "Using command line alert percentage of $alert_percentage%."
fi

# If the exclude list was set on the command line ...
if [[ $exclude_command_line_flag -eq 1 ]]
    then
    # ... and if it was set to "",
    if [ -z "$exclude_list" ]
        then
        # Uncomment the below line for debugging
        #echo "Excluding nothing"
        # then change the null exclude list to something unmatchable because
        # grep --invert-match "" doesn't return anything when told to invert
        # match nothing.
        exclude_list="invert_match_null_does_not_work_so_make_ridiculous_match"
    fi
    # Uncomment the below line for debugging
    #echo "Using command line exclude list of $exclude_list."
    type_of_match="--invert-match ${exclude_list}"
# Else if the include list was set on the command line ...
elif [[ $include_command_line_flag -eq 1 ]]
    then
    # ... and if it was set to "",
    if [ -z "$include_list" ]
        then
        # then exit failure after printing a help message since including
        # nothing is an error condition.
        exit_status=1
        Help    # If called with an include flag but nothing is included,
                # call Help() with a non-zero (failure) exit status.
    fi
    type_of_match=${include_list}
# Else use the default exclude list if nothing was listed on the command line.
else
    # Uncomment the below line for debugging
    #echo "Using default exclude list of $DEFAULT_EXCLUDE_LIST."
    type_of_match="--invert-match ${DEFAULT_EXCLUDE_LIST}"
fi

# Run the df "disk free" program without line breaks (--portability).
# Remove the first line containing field titles.
# Remove excluded partitions.
# Only print the "Use %" and "Mounted on" fields and process that output.
$DF --portability | \
$SED '1d' | \
$GREP --extended-regexp $type_of_match | \
$AWK '{print $5 " " $6}' | process_df_lines

exit 0  # Exit true (success) after the process_df_lines() function returns
